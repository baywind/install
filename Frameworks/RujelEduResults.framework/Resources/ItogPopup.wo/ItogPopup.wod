Cross : WOImage {
  framework = "RujelBase";
  filename = "cross.png";
  align = "right";
  height = 10;
  width = 10;
  onclick = "closePopup();";
  style = "cursor:pointer;position:absolute;right:2pt;top:2pt;";
}

CanChange: WOConditional {
	condition = readOnly;
	negate = true;
}

CanDelete: WOConditional {
	condition = access.delete;
}

DeleteButton: WOGenericElement {
	value = session.strings.Reusables_Strings.uiElements.Delete;
	invokeAction = delete;
	onclick = "form.mark.value='';form.preset.selectedIndex=0;form.mark.onchange();form.save.click();form.changeReason.focus();";
	elementName = "input";
	type = "button";
}

MarkTitle: WOString {
	value = session.strings.RujelEduResults_EduResults.properties.ItogMark.mark;
}

EduPeriodTitle: WOString {
	value = itogContainer.title;
}

FlagCheckBox: WOCheckBox {
	checked = flagStatus;
	disabled = flagDisabled;
}

FlagList: WORepetition {
	item = item;
	list = flaglist;
}

FlagName: WOString {
	value = flagName;
}

FlagsTitle: WOString {
	value = session.strings.RujelEduResults_EduResults.properties.ItogMark.flags.this;
}

ItogDefined: WOConditional {
	condition = itog;
}

ItogEditForm: WOForm {
	onsubmit = "return (!save.disabled && tryLoad());";
}

MarkField: WOTextField {
	maxlength = 5;
	size = 4;
	value = dict.mark;
	style = "text-align:center;";
	disabled = readOnly;
	onkeypress = onkeypress;
	onchange = onkeypress;
	onblur = "form.changeReason.focus();";
	name = "mark";
}

PopupTitle: WOString {
	value = session.strings.RujelEduResults_EduResults.properties.ItogMark.this;
}

Save: WOSubmitButton {
	action = save;
	value = session.strings.Reusables_Strings.uiElements.Save;
	name = "save";
}

StudentName: PersonDisplay {
	person = student;
	startWithLast = true;
	last = 2;
	first = 2;
}

ShowHistory : WOConditional {
  condition = ifArchive;
}

ArchiveTitle : ArchiveRow {
	class = "grey";
}

ArchiveList : ArchiveRow {
	class = "ungerade";
	object = itog;
	item = item;
	identifierDict = identifierDictionary;
}

MarkInArchive : WOString {
  value = item.@mark;
}

ArchiveContainer : WOGenericContainer {
  elementName = "td";
  title = item.@value;
}

ReasonTitle : WOString {
  value = session.strings.RujelArchiving_Archive.reason;
  valueWhenEmpty = "Reason";
  escapeHTML = false;
}

ChangeReason : WOText {
  value = changeReason;
  rows = "2";
  style = "width:96%;";
  name = "changeReason";
  onkeypress = "form.save.disabled = (value == null || value.length < 2);";
}

ReadComment : WOConditional {
  condition = session.readAccess.read.ItogComment;
}

CommentTitle : WOString {
  value = session.strings.Reusables_Strings.dataTypes.comment;
  escapeHTML = false;
}

OtherComments : WOString {
  value = otherComments;
  escapeHTML = false;
}

CommentText : WOText {
  value = comments.manual;
  disabled = session.readAccess._edit.ItogComment;
  rows = 2;
  style = "width:92%;";
}

PresetPopup : WOPopUpButton {
  list = presets;
  item = item;
  selection = dict.preset;
  displayString = item.mark;
  name = "preset";
  noSelectionString = session.strings.RujelEduResults_EduResults.properties.ItogPreset.manual;
  onchange = "if(selectedIndex){hideObj('manualMark');}else{showObj('manualMark');form.mark.focus();}form.mark.onchange();";
}

IsNone : WORadioButton {
  name = "state";
  value = 0;
  selection = dict.state;
  title = session.strings.RujelEduResults_EduResults.properties.ItogPreset.none;
  disabled = readOnly;
}

IsBad : WORadioButton {
  name = "state";
  value = 1;
  selection = dict.state;
  title = session.strings.RujelEduResults_EduResults.properties.ItogPreset.bad;
  disabled = readOnly;
}

IsSoSo : WORadioButton {
  name = "state";
  value = 2;
  selection = dict.state;
  title = session.strings.RujelEduResults_EduResults.properties.ItogPreset.acceptable;
  disabled = readOnly;
}

IsGood : WORadioButton {
  name = "state";
  value = 3;
  selection = dict.state;
  title = session.strings.RujelEduResults_EduResults.properties.ItogPreset.good;
  disabled = readOnly;
}

ManualMarkContainer : WOGenericContainer {
  elementName = "span";
  id = "manualMark";
  style = manualMarkStyle;
  omitTags = dict.noPresets;
}

ReadOnly : WOConditional {
  condition = readOnly;
}

MarkValue : WOString {
  value = dict.mark;
  valueWhenEmpty = "&oslash;";
}

HasPresets : WOConditional {
  condition = presets.count;
}
