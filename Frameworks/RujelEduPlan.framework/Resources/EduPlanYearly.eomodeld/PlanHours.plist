{
    attributes = (
        {
            allowsNull = Y; 
            columnName = "CYCLE_ID"; 
            name = cycleID; 
            prototypeName = short; 
        }, 
        {
            allowsNull = N; 
            columnName = "GRADE_NUM"; 
            name = grade; 
            prototypeName = byte; 
        }, 
        {
            allowsNull = N; 
            columnName = "PH_ID"; 
            name = phID; 
            prototypeName = short; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }, 
        {
            allowsNull = N; 
            columnName = "EDU_SECTION"; 
            name = sectionID; 
            prototypeName = short; 
        }, 
        {
            allowsNull = N; 
            columnName = "EDU_PROGRAM"; 
            name = subjectID; 
            prototypeName = short; 
        }, 
        {
            allowsNull = N; 
            columnName = "TOTAL_HOURS"; 
            name = totalHours; 
            prototypeName = short; 
        }, 
        {
            allowsNull = N; 
            columnName = "WEEKLY_HOURS"; 
            name = weeklyHours; 
            prototypeName = short; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }
    ); 
    attributesUsedForLocking = (cycleID, grade, totalHours, weeklyHours); 
    className = "net.rujel.eduplan.PlanHours"; 
    classProperties = (eduSubject, grade, planCycle, section, totalHours, weeklyHours); 
    externalName = "PL_HOURS"; 
    fetchSpecificationDictionary = {}; 
    name = PlanHours; 
    primaryKeyAttributes = (phID); 
    relationships = (
        {
            destination = Subject; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = sID; sourceAttribute = subjectID; }); 
            name = eduSubject; 
        }, 
        {
            destination = PlanCycle; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = cID; sourceAttribute = cycleID; }); 
            name = planCycle; 
        }, 
        {
            destination = SchoolSection; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = sID; sourceAttribute = sectionID; }); 
            name = section; 
        }
    ); 
}
