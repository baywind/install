{
    attributes = (
        {columnName = "COMMENT_TEXT"; name = comment; prototypeName = string; }, 
        {
            allowsNull = N; 
            columnName = "CR_ID"; 
            name = courseID; 
            prototypeName = short; 
        }, 
        {
            allowsNull = N; 
            columnName = "EDU_CYCLE"; 
            name = cycleID; 
            prototypeName = short; 
        }, 
        {columnName = "EDU_YEAR"; name = eduYear; prototypeName = short; }, 
        {
            allowsNull = N; 
            columnName = "CR_FLAGS"; 
            name = flags; 
            prototypeName = byte; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }, 
        {columnName = "EDU_GROUP"; name = groupID; prototypeName = "int_3"; }, 
        {
            allowsNull = Y; 
            columnName = "TEACHER_ID"; 
            name = teacherID; 
            prototypeName = "int_3"; 
        }
    ); 
    attributesUsedForLocking = (cycleID, teacherID, groupID, eduYear, comment, flags); 
    className = "net.rujel.base.BaseCourse"; 
    classProperties = (lessons, eduYear, audience, lessonTabs, comment, flags, teacherChanges); 
    externalName = "BASE_COURSE"; 
    fetchSpecificationDictionary = {}; 
    name = BaseCourse; 
    primaryKeyAttributes = (courseID); 
    relationships = (
        {
            deleteRule = EODeleteRuleCascade; 
            destination = CourseAudience; 
            internalInfo = {"_nameInObjectStore" = courseaudience; }; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = courseID; sourceAttribute = courseID; }); 
            name = audience; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = BaseTab; 
            internalInfo = {"_nameInObjectStore" = baselessontabs; }; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = courseID; sourceAttribute = courseID; }); 
            name = lessonTabs; 
            ownsDestination = Y; 
        }, 
        {
            deleteRule = EODeleteRuleDeny; 
            destination = BaseLesson; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = courseID; sourceAttribute = courseID; }); 
            name = lessons; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = TeacherChange; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = courseID; sourceAttribute = courseID; }); 
            name = teacherChanges; 
            ownsDestination = Y; 
        }
    ); 
}
