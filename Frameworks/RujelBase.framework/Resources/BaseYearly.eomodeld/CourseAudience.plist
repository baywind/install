{
    attributes = (
        {
            allowsNull = N; 
            columnName = "EDU_COURSE"; 
            name = courseID; 
            prototypeName = short; 
        }, 
        {columnName = "STUDENT_ID"; name = studentID; prototypeName = integer; }
    ); 
    className = EOGenericRecord; 
    classProperties = (course); 
    externalName = "BASE_AUDIENCE"; 
    fetchSpecificationDictionary = {}; 
    name = CourseAudience; 
    primaryKeyAttributes = (courseID, studentID); 
    relationships = (
        {
            destination = BaseCourse; 
            internalInfo = {"_nameInObjectStore" = basecourse; }; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = courseID; sourceAttribute = courseID; }); 
            name = course; 
        }
    ); 
}
