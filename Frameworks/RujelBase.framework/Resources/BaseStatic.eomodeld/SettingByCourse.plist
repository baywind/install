{
	attributes = (
		{
			allowsNull = Y;
			columnName = COURSE;
			name = courseID;
			prototypeName = short;
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = Y;
			columnName = CYCLE;
			name = cycleID;
			prototypeName = "int_3";
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = Y;
			columnName = "EDU_YEAR";
			name = eduYear;
			prototypeName = short;
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = Y;
			columnName = GRADE;
			name = grade;
			prototypeName = short;
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = Y;
			columnName = "EDU_GROUP";
			name = groupID;
			prototypeName = "int_3";
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = Y;
			columnName = "NUM_VALUE";
			name = numericValue;
			prototypeName = integer;
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = N;
			columnName = "SC_ID";
			name = scID;
			prototypeName = "int_3";
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = N;
			columnName = SETTINGS;
			name = settingsID;
			prototypeName = "int_3";
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			allowsNull = Y;
			columnName = TEACHER;
			name = teacherID;
			prototypeName = "int_3";
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
		{
			columnName = "TEXT_VALUE";
			name = textValue;
			prototypeName = string;
			userInfo = {
				"_EntityModeler" = {
					generateSource = NO;
				};
			};
		},
	);
	"attributesUsedForLocking" = (
		courseID,
		cycleID,
		eduYear,
		grade,
		groupID,
		numericValue,
		settingsID,
		teacherID,
		textValue,
	);
	className = EOGenericRecord;
	classProperties = (
		eduYear,
		grade,
		numericValue,
		settingsBase,
		textValue,
	);
	externalName = "SETTING_BY_COURSE";
	"fetchSpecificationDictionary" = {};
	name = SettingByCourse;
	primaryKeyAttributes = (
		scID,
	);
	relationships = (
		{
			destination = SettingsBase;
			isMandatory = Y;
			isToMany = N;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = sID;
					sourceAttribute = settingsID;
				},
			);
			name = settingsBase;
		},
	);
}