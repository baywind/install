PageWrapper1: PageWrapper {
	hasChanges = false;
	title = plist.title;
	hasChanges = ec.hasChanges;
	onLoad = "onLoad();";
	resourcesFramework = "RujelCurriculum";
	scriptResource = "scripts.js";
	styles = "td.pad{padding:3px;} td.canPop{border:solid 2px #cccccc;}";
}

RegimeTabs : Tabs {
  currTab = currTab;
  tablist = plist.tabs;
  idAttribute = "title";
  titleAttribute = "title";
  hoverAttribute = "hover";
  onClick = session.checkRun;
  align = "left";
}

Params : WORepetition {
  list = currTab.params;
  item = itemDict;
}

ParamSelector : DisplayAny {
  value = params;
  dict = itemDict;
}

Form : WOForm {
  multipleSubmit = true;
}

BeginTitle : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.begin;
  valueWhenEmpty = "since";
}

EndTitle : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.end;
  valueWhenEmpty = "since";
}

BeginDate : WOTextField {
  value = currReason.begin;
  dateformat = application.prefs.ui.dateFormat;
  size = 10;
  style = "text-align:center;";
  onkeypress = "return isNumberInput(event,true);";
  name = "begin";
  disabled = tmpDict.reasonsToMoveIn;
}

EndDate : WOTextField {
  value = currReason.end;
  dateformat = application.prefs.ui.dateFormat;
  size = 10;
  style = "text-align:center;";
  onkeypress = "return isNumberInput(event,true);";
  name = "end";
  onfocus = "if(value==null||value.length==0)value=form.begin.value;";
  disabled = tmpDict.reasonsToMoveIn;
}

ReasonTitle : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.Reason;
  valueWhenEmpty = "Reason";
  escapeHTML = false;
}

ReasonTextField : WOText {
  value = currReason.reason;
  style = "width:98%";
  rows = 2;
  name = "reasonText";
  disabled = tmpDict.reasonsToMoveIn;
}

CanChange : WOConditional {
	condition = session.readAccess.edit.currReason;
}

Save: WOSubmitButton {
	action = save;
	value = application.strings.Reusables_Strings.uiElements.Save;
    disabled = tmpDict.reasonsToMoveIn;
}
CanDelete: WOConditional {
	condition = canDelete;
}

DeleteButton: WOGenericElement {
	value = application.strings.Reusables_Strings.uiElements.Delete;
	invokeAction = delete;
	onclick = session.tryLoad;
	elementName = "input";
	type = "button";
}
VerificationTitle : WOString {
  value = plist.verification;
  valueWhenEmpty = "Verification";
  escapeHTML = false;
}

Verification : WOText {
  value = currReason.verification;
  style = "width:96%";
  disabled = tmpDict.reasonsToMoveIn;
}

SubsTitle : WOString {
  value = tmpDict.substitutes.title;
  valueWhenEmpty = "Substitutes";
  escapeHTML = false;
}

VarsTitle : WOString {
  value = tmpDict.variations.title;
  valueWhenEmpty = "Variations";
  escapeHTML = false;
}

ReasonSelected : WOConditional {
  condition = currReason;
}

RelatedTitle : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.relatedTo;
  valueWhenEmpty = "Related to";
  escapeHTML = false;
}

HasTeacher : WORadioButton {
  value = 1;
  selection = relation;
  name = "relation";
  disabled = noTeacher;
}

WithTeacher : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.withTeacher;
  escapeHTML = false;
}

HasEduGroup : WORadioButton {
  value = 2;
  selection = relation;
  name = "relation";
  disabled = noEduGroup;
}

WithEduGroup : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.withEduGroup;
  escapeHTML = false;
}

ReasonTeacher : PersonDisplay {
  person = reasonTeacher;
  last = 2;
  first = 1;
  second = 1;
  valueWhenEmpty = application.strings.RujelBase_Base.vacant;
  valueWhenEmptyOld = plist.Select;
}

ReasonGroup : WOString {
  value = reasonGroup.name;
  valueWhenEmpty = plist.Select;
 }
 
TeacherIcon : WOImage {
  framework = "RujelCurriculum";
  filename = "teacher.png";
  align = "right";
  alt = "teacher";
}

GroupIcon : WOImage {
  framework = "RujelCurriculum";
  filename = "group.png";
  align = "right";
  alt = "group";
}

SchoolIcon : WOImage {
  framework = "RujelCurriculum";
  filename = "school.png";
  align = "right";
  alt = "school";
}

SelectTeacher : WOSubmitButton {
	action = selectTeacher;
	name = "selectTeacher";
	id = "chooseTeacher";
	style = "display:none;";
}

SelectGroup : WOSubmitButton {
	action = selectEduGroup;
	name = "selectEduGroup";
	id = "chooseGroup";
	style = "display:none;";
}

ForWholeSchool : WORadioButton {
  value = 0;
  selection = relation;
  name = "relation";
  disabled = tmpDict.reasonsToMoveIn;
}

WithWholeSchool : WOString {
  value = application.strings.RujelCurriculum_Curriculum.Reason.withWholeSchool;
  escapeHTML = false;
}

SubsCount : WOString {
  value = currReason.substitutes.count;
  numberformat = "0";
  valueWhenEmpty = "0";
  escapeHTML = false;
}
VarsCount : WOString {
  value = currReason.variations.count;
  numberformat = "0";
  valueWhenEmpty = "0";
  escapeHTML = false;
}

ShowSubs : OnClickContainer {
  elementName = "span";
  invokeAction = showSubstitutes;
  onclick = session.checkRun;
  class = "grey";
  style = "margin:0px 1em;padding:2px 4px;";
}

ShowVars : OnClickContainer {
  elementName = "span";
  invokeAction = showVariations;
  onclick = session.checkRun;
  class = "grey";
  style = "margin:0px 1em;padding:2px 4px;";
}

Create : WOGenericElement {
  elementName = "input";
  type = "button";
  invokeAction = createReason;
  value = plist.new;
  onclick = session.checkRun;
}

GroupCell : OnClickContainer {
  elementName = "td";
  onclick = "ajaxPost('chooseGroup',event);";
  style = "font-style:italic;text-decoration:underline;";
  title = plist.Select;
  disabled = tmpDict.reasonsToMoveIn;
  align = "left";
}

TeacherCell : OnClickContainer {
  elementName = "td";
  onclick = "ajaxPost('chooseTeacher',event);";
  style = "font-style:italic;text-decoration:underline;";
  title = plist.Select;
  disabled = tmpDict.reasonsToMoveIn;
  align = "left";
}

AllowSelection : WOConditional {
  condition = tmpDict.allowSelection;
}

ManipulateSelection : WOConditional {
  condition = manipulateSelection;
}

SelectBox : WOCheckBox {
  checked = ticked;
  disabled = tmpDict.reasonsToMoveIn;
  name = "cb";
  onclick = "tick(this);";
}

TicksForm : WOForm {
  action = reasonsToMoveIn;
  id = "ticks"; 
}

NotExternal : WOConditional {
  condition = currReason.external;
  negate = true;
}

ToMove : WOConditional {
  condition = tmpDict.reasonsToMoveIn;
}

NewReasonRow : WOGenericContainer {
  elementName = "tr";
  class = rowClass;
  onclick = "var r = this.getElementsByTagName('input')[0]; if(!r.checked)r.click();";
}

SelectionRadio : WORadioButton {
  name = "nextReason";
  selection = tmpDict.selectedReason;
  value = tmpDict.index;
  onclick = "showInfo(this);";
}

ReasonSelectRepetition : WORepetition {
  list = tmpDict.reasonsToMoveIn;
  item = itemRow;
  index = tmpDict.index;
}

NextReasonPresenter : ReasonPresenter {
  reason = itemRow;
}

NextExtString : WOString {
  value = itemRow.extToString;
  escapeHTML = false;
}

NewNextRadio : WORadioButton {
  name = "nextReason";
  selection = tmpDict.selectedReason;
  value = -1;
  onclick = "showInfo(this);";
}

NewReasonTitle : WOString {
  value = plist.newReason;
  valueWhenEmpty = "New Reason";
  escapeHTML = false;
}

SubmitMoveReasons : WOSubmitButton {
  action = moveToReason;
  value = plist.chooseReason;
}

CancelButton: WOGenericElement {
	value = application.strings.Reusables_Strings.uiElements.Cancel;
	invokeAction = cancelMove;
	onclick = session.tryLoad;
	elementName = "input";
	type = "button";
}

SelectNextForm : WOForm {
}

MoveSelected : WOGenericElement {
  elementName = "input";
  type = "button";
  value = plist.chooseReason;
  onclick = "document.getElementById('ticks').submit();";
}

MoveTitle : WOString {
  value = plist.move;
  valueWhenEmpty = "Move";
  escapeHTML = false;
}

TicksCount : WOTextField {
  value = tmpDict.selectedObjects.count;
  disabled = true;
  size = 2;
  style = "text-align:center;";
  id = "total";
}

Ticker : Ticker {
  align = "center";
  inline = true;
}

NextBegin : WOString {
  value = itemRow.begin;
  dateformat = application.prefs.ui.dateFormat;
}

NextEnd : WOString {
  value = itemRow.end;
  valueWhenEmpty = "...";
  dateformat = application.prefs.ui.dateFormat;
}

NextSubs : WOString {
  value = itemRow.substitutes.count;
  numberformat = "0";
}

NextVars : WOString {
  value = itemRow.variations.count;
  numberformat = "0";
}

MoveImage : WOImage {
  framework = "RujelCurriculum";
  filename = "moveTo.gif";
  align = "center";
  alt = "move";
}

CanCreate : WOConditional {
  condition = canCreate;
}

PropsBegin : WOString {
  value = tmpDict.reasonProps.begin;
   dateformat = application.prefs.ui.dateFormat;
}

PropsEnd : WOString {
  value = tmpDict.reasonProps.end;
   dateformat = application.prefs.ui.dateFormat;
}
PropsEduGroup : WOString {
  value = tmpDict.reasonProps.eduGroup.name;
}

PropsTeacher : PersonDisplay {
  person = tmpDict.reasonProps.teacher;
  last = 2;
  first = 1;
  second = 1;
  startWithLast = true;
}

IfArchive : WOConditional {
  condition = ifArchive;
}

CallArchive : OnClickContainer {
  elementName = "div";
  invokeAction = archivePopup;
  onclick = session.ajaxPopup;
  style = "float:right;color:#666666;border:1px solid #cccccc;height:1em;min-width:1em;";
  title = plist.archive;
}

ArchiveCount : WOString {
  value = tmpDict.archivesCount;
  numberformat = "0";
  valueWhenEmpty = ".";
}

ReportTable : ReportTable {
  list = list;
  properties = currTab.properties;
  itemRow = itemRow;
  itemDict = itemDict;
  item = item;
  selectAction = select;
  onClick = onClick;
  rowClass = rowClass;
  cellClass = cellClass;
  currObject = currObject;
  width = "100%";
  cellpadding = "1";
}

IsHead : WOConditional {
  condition = itemRow;
  negate = true;
}

IsRow : WOConditional {
  condition = itemRow;
}

CanSubmit : WOConditional {
  condition = session.readAccess.edit.Curriculum;
}

ExportButton : WOHyperlink {
  action = export;
  string = application.strings.RujelReports_Reports.export;
}
