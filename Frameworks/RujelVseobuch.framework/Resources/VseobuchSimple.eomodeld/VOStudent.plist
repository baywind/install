{
    attributes = (
        {
            columnName = "BORN_DT"; 
            externalType = date; 
            name = birthDate; 
            valueClassName = NSCalendarDate; 
        }, 
        {
            allowsNull = Y; 
            columnName = LASTNAME; 
            externalType = varchar; 
            name = firstName; 
            valueClassName = NSString; 
            valueType = S; 
            width = 50; 
        }, 
        {
            columnName = ID; 
            externalType = int; 
            name = id; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = FIRSTNAME; 
            externalType = varchar; 
            name = lastName; 
            valueClassName = NSString; 
            valueType = S; 
            width = 50; 
        }, 
        {
            allowsNull = Y; 
            columnName = SECONDNAME; 
            externalType = varchar; 
            name = secondName; 
            valueClassName = NSString; 
            valueType = S; 
            width = 50; 
        }, 
        {
            allowsNull = Y; 
            columnName = "ID_SEX"; 
            externalType = int; 
            internalInfo = {"_nameInObjectStore" = "ID_SEX"; }; 
            name = sex; 
            readFormat = "2 - %P"; 
            valueClassName = NSNumber; 
            valueType = c; 
            writeFormat = "2 - %V"; 
        }
    ); 
    attributesUsedForLocking = (id, lastName, firstName, secondName, birthDate); 
    className = "net.rujel.vseobuch.VOStudent"; 
    classProperties = (lastName, firstName, secondName, sex, birthDate, grouping, person); 
    externalName = student; 
    fetchSpecificationDictionary = {}; 
    name = VOStudent; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = VOList; 
            internalInfo = {"_nameInObjectStore" = teachs; }; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = idStudent; sourceAttribute = id; }); 
            name = grouping; 
        }, 
        {
            destination = VOStudent; 
            internalInfo = {"_nameInObjectStore" = vOStudent; }; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = id; }); 
            name = person; 
        }
    ); 
}
