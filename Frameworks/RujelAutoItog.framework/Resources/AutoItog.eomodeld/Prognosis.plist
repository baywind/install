{
    attributes = (
        {
            allowsNull = Y; 
            columnName = "BONUS_ID"; 
            name = bonusID; 
            prototypeName = "int_3"; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }, 
        {
            allowsNull = N; 
            columnName = "COMPLETE_RATE"; 
            name = complete; 
            precision = 5; 
            prototypeName = decimal; 
            scale = 4; 
        }, 
        {
            allowsNull = N; 
            columnName = "EDU_COURSE"; 
            name = courseID; 
            prototypeName = short; 
        }, 
        {
            allowsNull = Y; 
            columnName = "FIRE_DATE"; 
            name = fireDate; 
            prototypeName = date; 
        }, 
        {allowsNull = N; columnName = "PR_FLAGS"; name = flags; prototypeName = byte; }, 
        {
            allowsNull = N; 
            columnName = "ITOG_CONTAINER"; 
            name = itogID; 
            prototypeName = short; 
        }, 
        {columnName = "PR_MARK"; name = mark; prototypeName = anagram; }, 
        {columnName = "VALUE_STATE"; name = state; prototypeName = byte; }, 
        {
            allowsNull = N; 
            columnName = "STUDENT_ID"; 
            name = studentID; 
            prototypeName = integer; 
        }, 
        {
            columnName = "SUCCESS_VALUE"; 
            name = value; 
            precision = 5; 
            prototypeName = decimal; 
            scale = 4; 
        }
    ); 
    attributesUsedForLocking = (value, complete, mark, fireDate, flags, bonusID, state); 
    className = "net.rujel.autoitog.Prognosis"; 
    classProperties = (value, complete, mark, fireDate, flags, bonus, itogContainer, state); 
    externalName = "AI_PROGNOSIS"; 
    fetchSpecificationDictionary = {}; 
    name = Prognosis; 
    primaryKeyAttributes = (courseID, itogID, studentID); 
    relationships = (
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Bonus; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = bID; sourceAttribute = bonusID; }); 
            name = bonus; 
            ownsDestination = Y; 
        }, 
        {
            destination = ItogContainer; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = iID; sourceAttribute = itogID; }); 
            name = itogContainer; 
        }
    ); 
}
