{
    attributes = (
        {
            allowsNull = Y; 
            columnName = "BSET_ID"; 
            name = bSetID; 
            prototypeName = short; 
        }, 
        {
            columnName = "CALCULATOR_NAME"; 
            name = calculatorName; 
            prototypeName = string; 
        }, 
        {
            allowsNull = Y; 
            columnName = "COURSE_ID"; 
            name = courseID; 
            prototypeName = integer; 
        }, 
        {
            allowsNull = Y; 
            columnName = "EDU_CYCLE"; 
            name = eduCycleID; 
            prototypeName = "int_3"; 
        }, 
        {
            allowsNull = Y; 
            columnName = "EDU_GROUP"; 
            name = eduGroupID; 
            prototypeName = integer; 
        }, 
        {
            allowsNull = N; 
            columnName = "EDU_YEAR"; 
            name = eduYear; 
            prototypeName = short; 
        }, 
        {allowsNull = N; columnName = FLAGS; name = flags; prototypeName = byte; }, 
        {allowsNull = N; columnName = "PU_ID"; name = pKey; prototypeName = "int_3"; }, 
        {
            allowsNull = N; 
            columnName = "PERTYPE_ID"; 
            name = perTypeID; 
            prototypeName = short; 
        }
    ); 
    attributesUsedForLocking = (calculatorName, courseID, eduCycleID, eduGroupID, eduYear, flags, perTypeID); 
    className = "net.rujel.autoitog.PrognosUsage"; 
    classProperties = (borderSet, calculatorName, eduYear, flags, periodType); 
    externalName = "PROGNOS_USAGE"; 
    fetchSpecificationDictionary = {}; 
    name = PrognosUsage; 
    primaryKeyAttributes = (pKey); 
    relationships = (
        {
            destination = BorderSet; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = bsID; sourceAttribute = bSetID; }); 
            name = borderSet; 
        }, 
        {
            destination = PeriodType; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = typeID; sourceAttribute = perTypeID; }); 
            name = periodType; 
        }
    ); 
}
