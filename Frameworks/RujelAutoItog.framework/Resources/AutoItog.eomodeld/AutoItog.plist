{
    attributes = (
        {
            allowsNull = Y; 
            columnName = "BORDER_SET"; 
            name = bSetID; 
            prototypeName = short; 
        }, 
        {
            columnName = "CALCULATOR_NAME"; 
            name = calculatorName; 
            prototypeName = string; 
        }, 
        {allowsNull = N; columnName = AI_FLAGS; name = flags; prototypeName = byte; }, 
        {allowsNull = N; columnName = "AI_ID"; name = aiID; prototypeName = short; }, 
        {
            allowsNull = N; 
            columnName = "ITOG_CONTANER"; 
            name = containerID; 
            prototypeName = short; 
        }, 
        {
            allowsNull = N; 
            columnName = "FIRE_DATE"; 
            name = fireDate; 
            prototypeName = date; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }, 
        {
            allowsNull = N; 
            columnName = "FIRE_TIME"; 
            name = fireTime; 
            prototypeName = time; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }, 
        {
            allowsNull = N; 
            columnName = "LIST_NAME"; 
            name = listName; 
            prototypeName = word; 
            userInfo = {"_EntityModeler" = {generateSource = NO; }; }; 
        }
    ); 
    attributesUsedForLocking = (calculatorName, containerID, fireDate, fireTime, flags, listName); 
    className = "net.rujel.autoitog.AutoItog"; 
    classProperties = (borderSet, calculatorName, fireDate, fireTime, flags, itogContainer, listName); 
    externalName = AI_AUTOITOG; 
    fetchSpecificationDictionary = {}; 
    name = AutoItog; 
    primaryKeyAttributes = (aiID); 
    relationships = (
        {
            destination = BorderSet; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = bsID; sourceAttribute = bSetID; }); 
            name = borderSet; 
        }, 
        {
            destination = ItogContainer; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = iID; sourceAttribute = containerID; }); 
            name = itogContainer; 
        }
    ); 
}
